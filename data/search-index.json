[
{
  "id": "cheatsheet-styles",
  "title": "Cheatsheet styles",
  "url": "/cheatsheet-styles",
  "category": "Others",
  "keywords": null,
  "content_html": "<h2 id=\"intro\">Intro</h2>\n\n<h2 class=\"-three-column\" id=\"variants\">Variants</h2>\n\n<h3 id=\"h2-sections\">H2 sections</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-one-column</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>-two-column</code></td>\n      <td><em>(default)</em></td>\n    </tr>\n    <tr>\n      <td><code>-three-column</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>-left-reference</code></td>\n      <td>3 columns<br /><em>(short first column)</em></td>\n    </tr>\n    <tr>\n      <td><code>-no-hide</code></td>\n      <td>Don’t hide H2</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#two-columns\">H2 sections</a></p>\n\n<h3 id=\"h3-sections\">H3 sections</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-prime</code></td>\n      <td>Highlight</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#h3-sections-1\">H3 sections</a></p>\n\n<h3 id=\"tables\">Tables</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-bold-first</code></td>\n      <td>Bold first column</td>\n    </tr>\n    <tr>\n      <td><code>-headers</code></td>\n      <td>Show headers</td>\n    </tr>\n    <tr>\n      <td><code>-left-align</code></td>\n      <td>Don’t right align last column</td>\n    </tr>\n    <tr>\n      <td><code>-mute-em</code></td>\n      <td>Lower opacity for italics</td>\n    </tr>\n    <tr>\n      <td><code>-no-wrap</code></td>\n      <td>Don’t wrap text</td>\n    </tr>\n    <tr>\n      <td><code>-shortcuts</code></td>\n      <td>Shortcut keys</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#tables-1\">Tables</a></p>\n\n<h3 id=\"code\">Code</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-box-chars</code></td>\n      <td>Less line height<br /><em>for box drawing chars</em></td>\n    </tr>\n    <tr>\n      <td><code>-setup</code></td>\n      <td>Gray background</td>\n    </tr>\n    <tr>\n      <td><code>-wrap</code></td>\n      <td>Enables line-wrapping</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#code-1\">Code</a></p>\n\n<h3 id=\"paragraphs\">Paragraphs</h3>\n\n<table class=\"-gray\">\n  <tbody>\n    <tr>\n      <td><code>-setup</code></td>\n      <td>Gray background</td>\n    </tr>\n    <tr>\n      <td><code>-crosslink</code></td>\n      <td>Has arrow on the link</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#paragraphs-1\">Paragraphs</a></p>\n\n<h3 id=\"lists\">Lists</h3>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>-also-see</code></td>\n      <td>Lighter background</td>\n    </tr>\n    <tr>\n      <td><code>-four-column</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>-six-column</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"#lists-1\">Lists</a></p>\n\n<h3 class=\"-prime\" id=\"adding-variants\">Adding variants</h3>\n\n<pre><code>## Section\n{: .-two-column}\n</code></pre>\n\n<p>Devhints uses Kramdown, and supports adding classes via Kramdown’s syntax.</p>\n\n<h2 class=\"-three-column\" id=\"h3-sections-1\">H3 sections</h2>\n\n<h3 id=\"supported\">Supported</h3>\n\n<p>Each section can have the following children:</p>\n\n<h4 id=\"white\">White</h4>\n\n<ul>\n  <li><code>pre</code></li>\n  <li><code>ul</code></li>\n  <li><code>table</code></li>\n</ul>\n\n<h4 id=\"gray\">Gray</h4>\n\n<ul>\n  <li><code>p</code></li>\n  <li><code>h4</code></li>\n</ul>\n\n<h3 class=\"-prime\" id=\"prime-section\">Prime section</h3>\n\n<p>This is a section with <code>{: .-prime}</code>. Notice the fancy highlight! Great for “getting started” kind of snippets.</p>\n\n<h3 id=\"h3-section\">H3 section</h3>\n\n<p>Every box is an H3 section. The box will encompass everything inside the body of the H3.</p>\n\n<p>This is a basic section with paragraphs in it.</p>\n\n<h2 class=\"-three-column\" id=\"code-1\">Code</h2>\n\n<h3 id=\"basic-code\">Basic code</h3>\n\n<pre><code class=\"language-js\">here.is(() =&gt; {\n  some.code()\n})\n</code></pre>\n\n<pre><code class=\"language-js\">here.is.some.more()\n</code></pre>\n\n<p>Code blocks can be placed one after the other.</p>\n\n<p>See: <a href=\"/\">Cheatsheets</a></p>\n\n<h3 id=\"code-with-headings\">Code with headings</h3>\n\n<h4 class=\"-file\" id=\"indexjs\">index.js</h4>\n\n<pre><code class=\"language-js\">here.is(() =&gt; {\n  some.code()\n})\n</code></pre>\n\n<h4 class=\"-file\" id=\"otherjs\">other.js</h4>\n\n<pre><code class=\"language-js\">here.is.some.more()\n</code></pre>\n\n<p>Code blocks can have headings.</p>\n\n<h3 id=\"highlighted-lines\">Highlighted lines</h3>\n\n<pre data-line=\"3\"><code class=\"language-js\">app.start(() =&gt; {\n  const port = app.server.port\n  console.log(`Started at ${port}`)\n})\n</code></pre>\n\n<p>Add <code>{: data-line=\"3\"}</code> to add line highlights.</p>\n\n<h3 id=\"multiple-highlights\">Multiple highlights</h3>\n\n<pre data-line=\"2,3\"><code class=\"language-js\">app.start(() =&gt; {\n  const port = app.server.port\n  console.log(`Started at ${port}`)\n})\n</code></pre>\n\n<p>Add <code>{: data-line=\"2,3\"}</code> to add multiple line highlights.</p>\n\n<h3 id=\"setup-blocks\">Setup blocks</h3>\n\n<pre class=\"-setup\"><code class=\"language-js\">import React from 'react'\n</code></pre>\n\n<pre><code class=\"language-js\">class Hello extends React.Component {\n  render () {\n    return &lt;span&gt;Hello&lt;/span&gt;\n  }\n}\n</code></pre>\n\n<p>Add <code>{: .-setup}</code> to a <code>pre</code> or <code>table</code> or <code>ul</code>.</p>\n\n<h3 id=\"long-lines\">Long lines</h3>\n\n<pre><code class=\"language-js\">function createNode(nodeName: string, options: { key: string }) {\n  return true\n}\n</code></pre>\n\n<p>Long lines will have scrollbars.</p>\n\n<h3 id=\"line-wrapping\">Line wrapping</h3>\n\n<pre class=\"-wrap\"><code class=\"language-js\">&lt;script&gt;(function(d,s){if(window.Promise&amp;&amp;[].includes&amp;&amp;Object.assign&amp;&amp;window.Map)return;var js,sc=d.getElementsByTagName(s)[0];js=d.createElement(s);js.src='https://cdn.polyfill.io/v2/polyfill.min.js';sc.parentNode.insertBefore(js, sc);}(document,'script'))&lt;/script&gt;\n</code></pre>\n\n<p>Add <code>-wrap</code> to wrap long lines.</p>\n\n<h2 class=\"-three-column\" id=\"lists-1\">Lists</h2>\n\n<h3 id=\"lists-2\">Lists</h3>\n\n<ul>\n  <li>This is</li>\n  <li>a list</li>\n  <li>with a few items</li>\n</ul>\n\n<p>Here’s an extra paragraph after the list.</p>\n\n<h3 id=\"lists-with-headings\">Lists with headings</h3>\n\n<h4 id=\"part-1\">Part 1</h4>\n\n<ul>\n  <li><code>createElement()</code></li>\n  <li><code>componentDidMount()</code></li>\n  <li><code>componentWillUnmount()</code></li>\n</ul>\n\n<h4 id=\"part-2\">Part 2</h4>\n\n<ul>\n  <li><code>shouldComponentUpdate()</code></li>\n  <li><code>componentWillReceiveProps()</code></li>\n</ul>\n\n<p>Here’s an extra paragraph after the list.</p>\n\n<h2 class=\"-one-column\" id=\"list-columns\">List columns</h2>\n\n<h3 id=\"six-columns\">Six columns</h3>\n\n<ul class=\"-six-column\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n  <li>Four</li>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n  <li>Eight</li>\n  <li>Nine</li>\n  <li>Ten</li>\n  <li>Eleven</li>\n</ul>\n\n<p>Add <code>{: .-six-column}</code> to make large lists.</p>\n\n<h3 id=\"four-columns\">Four columns</h3>\n\n<ul class=\"-four-column\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n  <li>Four</li>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n  <li>Eight</li>\n  <li>Nine</li>\n  <li>Ten</li>\n  <li>Eleven</li>\n</ul>\n\n<p>Add <code>{: .-four-column}</code> to make large lists.</p>\n\n<h3 id=\"also-see\">Also see</h3>\n\n<ul class=\"-also-see\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n  <li>Four</li>\n  <li>Five</li>\n  <li>Six</li>\n  <li>Seven</li>\n  <li>Eight</li>\n  <li>Nine</li>\n  <li>Ten</li>\n</ul>\n\n<p>Add <code>{: .-also-see}</code>.</p>\n\n<h2 class=\"-three-column\" id=\"paragraphs-1\">Paragraphs</h2>\n\n<h3 id=\"basic-paragraphs\">Basic paragraphs</h3>\n\n<p>This is a basic section with paragraphs in it. When paragraphs are the first elements in an H3 section’s body, they appear as white.</p>\n\n<h3 id=\"basic-paragraphs-1\">Basic paragraphs</h3>\n\n<pre><code>···\n</code></pre>\n\n<p>When paragraphs appear after <code>pre</code>/<code>table</code>/<code>ul</code>, they appear with a gray background.</p>\n\n<h3 id=\"preludes\">Preludes</h3>\n\n<p class=\"-setup\">Here’s a prelude paragraph. Add <code>{: .-setup}</code> to make paragraphs appear with a gray background.</p>\n\n<pre><code>···\n</code></pre>\n\n<h3 id=\"crosslink\">Crosslink</h3>\n\n<p>Add <code>{: .-crosslink}</code> to make big loud external links:</p>\n\n<pre><code>···\n</code></pre>\n\n<p class=\"-crosslink\"><a href=\"/\">Home</a></p>\n\n<h2 class=\"-three-column\" id=\"tables-1\">Tables</h2>\n\n<h3 id=\"basic-table\">Basic table</h3>\n\n<h4 id=\"date\">Date</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Example</th>\n      <th>Output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>%m/%d/%Y</code></td>\n      <td><code>06/05/2013</code></td>\n    </tr>\n    <tr>\n      <td><code>%A, %B %e, %Y</code></td>\n      <td><code>Sunday, June 5, 2013</code></td>\n    </tr>\n    <tr>\n      <td><code>%b %e %a</code></td>\n      <td><code>Jun 5 Sun</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"time\">Time</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Example</th>\n      <th>Output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>%H:%M</code></td>\n      <td><code>23:05</code></td>\n    </tr>\n    <tr>\n      <td><code>%I:%M %p</code></td>\n      <td><code>11:05 PM</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>This is a basic table with h4’s.</p>\n\n<h3 id=\"shortcuts\">Shortcuts</h3>\n\n<table class=\"-shortcuts\">\n  <tbody>\n    <tr>\n      <td><code>V</code></td>\n      <td>Vector</td>\n    </tr>\n    <tr>\n      <td><code>P</code></td>\n      <td>Pencil</td>\n    </tr>\n    <tr>\n      <td><code>T</code></td>\n      <td>Text</td>\n    </tr>\n    <tr>\n      <td><code>L</code></td>\n      <td>Line</td>\n    </tr>\n    <tr>\n      <td><code>R</code></td>\n      <td>Rectangle</td>\n    </tr>\n    <tr>\n      <td><code>O</code></td>\n      <td>Oval</td>\n    </tr>\n    <tr>\n      <td><code>U</code></td>\n      <td>Rounded</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Add <code>{: .-shortcuts}</code> to tables.</p>\n\n<h3 id=\"with-headers\">With headers</h3>\n\n<table class=\"-headers\">\n  <thead>\n    <tr>\n      <th>Prefix</th>\n      <th>Example</th>\n      <th>What</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>//</code></td>\n      <td><code>//hr[@class='edge']</code></td>\n      <td>Anywhere</td>\n    </tr>\n    <tr>\n      <td><code>./</code></td>\n      <td><code>./a</code></td>\n      <td>Relative</td>\n    </tr>\n    <tr>\n      <td><code>/</code></td>\n      <td><code>/html/body/div</code></td>\n      <td>Root</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Add <code>{: .-headers}</code> to add headers.</p>\n\n<h2 id=\"two-columns\">Two columns</h2>\n\n<h3 id=\"one\">One</h3>\n\n<pre><code>···\n</code></pre>\n\n<h3 id=\"two\">Two</h3>\n\n<pre><code>···\n</code></pre>\n\n<h2 class=\"-left-reference\" id=\"left-reference\">Left reference</h2>\n\n<h3 id=\"one-1\">One</h3>\n\n<pre><code>···\n···\n···\n···\n···\n···\n···\n···\n</code></pre>\n\n<h3 id=\"two-1\">Two</h3>\n\n<pre><code>···\n</code></pre>\n\n<h3 id=\"three\">Three</h3>\n\n<pre><code>···\n</code></pre>\n\n<h2 class=\"-one-column\" id=\"one-column\">One column</h2>\n\n<h3 id=\"one-2\">One</h3>\n\n<pre><code>···\n</code></pre>",
  "intro_html": "<p>This is a reference of styles that you can use on Devhints cheatsheets. How\nmeta!</p>",
  "description_html": "",
  "tags": ["WIP"],
  "updated": "2017-10-26"
},{
  "id": "phoenix",
  "title": "Phoenix framework",
  "url": "/phoenix",
  "category": "Elixir",
  "keywords": null,
  "content_html": "<h3 id=\"creating-a-project\">Creating a project</h3>\n\n<pre><code class=\"language-shell\"># mix phx.new &lt;name&gt;\nmix phx.new my_app\n</code></pre>\n\n<h4 id=\"options\">Options</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>--live</code></td>\n      <td>include LiveView</td>\n    </tr>\n    <tr>\n      <td><code>--database</code></td>\n      <td>possible values are: <code>postgres</code>, <code>mysql</code>, <code>mssql</code></td>\n    </tr>\n    <tr>\n      <td><code>--no-webpack</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-ecto</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-html</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-gettext</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-dashboard</code></td>\n      <td>do not include Phoenix.LiveDashboard</td>\n    </tr>\n    <tr>\n      <td><code>--install</code></td>\n      <td>will fetch and install dependencies (including npm js)</td>\n    </tr>\n    <tr>\n      <td><code>--no-install</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"generators\">Generators</h2>\n\n<h3 id=\"migration\">migration</h3>\n\n<pre><code class=\"language-shell\"># mix ecto.gen.migration &lt;migration name&gt;\nmix ecto.gen.migration add_posts_table\n</code></pre>\n\n<h4 id=\"other-generators\">Other generators</h4>\n\n<ul>\n  <li><code>cert</code></li>\n  <li><code>channel</code></li>\n  <li><code>embedded</code></li>\n  <li><code>presence</code></li>\n  <li><code>secret</code></li>\n</ul>\n\n<h3 id=\"schema\">schema</h3>\n\n<pre><code class=\"language-shell\"># mix phx.gen.schema &lt;schema module&gt; &lt;plural model name&gt; &lt;attributes&gt;\nmix phx.gen.schema Blog.Post blog_posts title:string views:integer\n</code></pre>\n\n<p>This generates:</p>\n\n<ul>\n  <li>a <em>schema file</em> in <code>lib/my_app/blog/post.ex</code>, with a <code>blog_posts</code> table</li>\n  <li>a <em>migration file</em> (use <code>--no-migration</code> to skip this)</li>\n</ul>\n\n<h4 id=\"attribute-types\">Attribute types</h4>\n\n<ul>\n  <li><code>:string</code> - this is the default type if no type is given</li>\n  <li><code>:integer</code></li>\n  <li><code>:float</code></li>\n  <li><code>:decimal</code></li>\n  <li><code>:boolean</code></li>\n  <li><code>:map</code></li>\n  <li><code>:array</code></li>\n  <li><code>:references</code></li>\n  <li><code>:text</code></li>\n  <li><code>:date</code></li>\n  <li><code>:time</code></li>\n  <li><code>:time_usec</code></li>\n  <li><code>:naive_datetime</code></li>\n  <li><code>:naive_datetime_usec</code></li>\n  <li><code>:utc_datetime</code></li>\n  <li><code>:utc_datetime_usec</code></li>\n  <li><code>:uuid</code></li>\n  <li><code>:binary</code></li>\n  <li><code>:datetime</code> - An alias for <code>:naive_datetime</code></li>\n</ul>\n\n<p><code>user_id:references:users</code> will result in a migration with an <code>:integer</code> column of <code>:user_id</code> and create an index.\n<code>tags:array:string</code> will create an array type if the database supports it.\nUnique columns can be generated with <code>title:unique</code> or <code>unique_int:integer:unique</code></p>\n\n<h4 id=\"options-1\">Options</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>--table cms_posts</code></td>\n      <td>change the name of the generated table</td>\n    </tr>\n    <tr>\n      <td><code>--no-migration</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"context\">context</h3>\n\n<pre><code class=\"language-shell\"># mix phx.gen.context &lt;context&gt; &lt;schema&gt; &lt;plural schema&gt; &lt;attributes&gt;\nmix phx.gen.context Accounts User users name:string age:integer\n</code></pre>\n\n<p>This generates:</p>\n\n<ul>\n  <li>a context module in <code>accounts.ex</code></li>\n  <li>a schema file in <code>accounts/user.ex</code>, with a <code>users</code> table</li>\n  <li>a migration file</li>\n</ul>\n\n<h4 id=\"options-2\">Options</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>--table cms_posts</code></td>\n      <td>change the name of the table generated</td>\n    </tr>\n    <tr>\n      <td><code>--no-schema</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-migration</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"html\">html</h3>\n\n<pre><code class=\"language-shell\"># mix phx.gen.html &lt;context&gt; &lt;schema&gt; &lt;plural schema&gt; &lt;attributes&gt;\nmix phx.gen.html Accounts User users name:string age:integer\n</code></pre>\n\n<p>This generates:</p>\n\n<ul>\n  <li>a context module in <code>lib/app/accounts.ex</code> for the accounts API</li>\n  <li>a schema file in <code>lib/app/accounts/user.ex</code>, with an users table</li>\n  <li>a view file in <code>lib/app_web/views/user_view.ex</code></li>\n  <li>a controller file in <code>lib/app_web/controllers/user_controller.ex</code></li>\n  <li>default CRUD templates in <code>lib/app_web/templates/user</code></li>\n</ul>\n\n<h4 id=\"options-3\">Options</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>--no-context</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-schema</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"json\">json</h3>\n\n<pre><code class=\"language-shell\"># mix phx.gen.html &lt;context&gt; &lt;schema&gt; &lt;plural schema&gt; &lt;attributes&gt;\nmix phx.gen.json Accounts User users name:string age:integer\n</code></pre>\n\n<p>This generates:</p>\n\n<ul>\n  <li>a context module in <code>lib/app/accounts.ex</code> for the accounts API</li>\n  <li>a schema file in <code>lib/app/accounts/user.ex</code>, with an users table</li>\n  <li>a view file in <code>lib/app_web/views/user_view.ex</code></li>\n  <li>a controller file in <code>lib/app_web/controllers/user_controller.ex</code></li>\n</ul>\n\n<h4 id=\"options-4\">Options</h4>\n\n<ul>\n  <li><code>--no-context</code></li>\n  <li><code>--no-schema</code></li>\n</ul>\n\n<h3 id=\"live\">live</h3>\n\n<pre><code class=\"language-shell\"># mix phx.gen.live &lt;context&gt; &lt;schema&gt; &lt;plural schema&gt; &lt;attributes&gt;\nmix phx.gen.live Accounts User users name:string age:integer\n</code></pre>\n\n<p>This generates:</p>\n\n<ul>\n  <li>a context module in <code>lib/app/accounts.ex</code> for the accounts API</li>\n  <li>a schema file in <code>lib/app/accounts/user.ex</code>, with an users table</li>\n  <li>a view file in <code>lib/app_web/views/user_view.ex</code></li>\n  <li>a LiveView in <code>lib/app_web/live/user_live/show_live.ex</code></li>\n  <li>a LiveView in <code>lib/app_web/live/user_live/index_live.ex</code></li>\n  <li>a LiveComponent in <code>lib/app_web/live/user_live/form_component.ex</code></li>\n  <li>a LiveComponent in <code>lib/app_web/live/modal_component.ex</code></li>\n  <li>a helpers modules in l<code>ib/app_web/live/live_helpers.ex</code></li>\n</ul>\n\n<h4 id=\"options-5\">Options</h4>\n\n<table>\n  <tbody>\n    <tr>\n      <td><code>--no-context</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>--no-schema</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"resources\">Resources</h2>\n\n<ul>\n  <li><a href=\"https://dashbit.co/blog/using-bootstrap-native-with-live-view\">Bootstrap native with Phoneix</a></li>\n  <li><a href=\"https://dockyard.com/blog/2020/12/21/optimizing-user-experience-with-liveview\">Optimizing User Experience with LiveView</a></li>\n</ul>",
  "intro_html": "",
  "description_html": "",
  "tags": ["Featured","WIP"],
  "updated": "2020-12-29"
},{
  "id": "postgresql",
  "title": "PostgreSQL",
  "url": "/postgresql",
  "category": "Databases",
  "keywords": null,
  "content_html": "<h3 id=\"data-types\">Data types</h3>\n\n<p class=\"-crosslink\"><a href=\"https://www.postgresql.org/docs/9.5/datatype.html\">Data types</a></p>\n\n<h3 id=\"constraints\">Constraints</h3>\n\n<table>\n  <thead>\n    <tr>\n      <th>Constraint</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>PRIMARY KEY</code></td>\n      <td>Used to identify a single row in the table</td>\n    </tr>\n    <tr>\n      <td><code>UNIQUE</code></td>\n      <td>This means that the values in this column have to be unique, so you can’t insert another row with the same value in this column as another row in the table</td>\n    </tr>\n    <tr>\n      <td><code>NOT NULL</code></td>\n      <td>This means that the inserted value can not be <code>NULL</code></td>\n    </tr>\n    <tr>\n      <td><code>FOREIGN KEY</code></td>\n      <td>This is a consistency check which ensures that each value in this column corresponds to another value in a column in another table</td>\n    </tr>\n    <tr>\n      <td><code>CHECK (expression)</code></td>\n      <td>This is allows you to run a more complex expression to test whether the values inserted are valid</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>See: <a href=\"https://www.postgresql.org/docs/9.4/ddl-constraints.html\">Constraints</a></p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": "2020-12-28"
},{
  "id": "assets/css/style.css",
  "title": null,
  "url": "/assets/css/style.css",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>@import “jekyll-theme-primer”;</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
},{
  "id": "redirects.json",
  "title": null,
  "url": "/redirects.json",
  "category": "Others",
  "keywords": null,
  "content_html": "<p>{}</p>",
  "intro_html": "",
  "description_html": "",
  "tags": null,
  "updated": null
}
]

